workDir = "/scratch/mwavcs/$USER/vcspipe_work"

params {
    cluster = 'setonix'

    // Paths
    vcs_dir = "/scratch/mwavcs/$USER/vcs_downloads"
    pyvenv  = "$MYSOFTWARE/setonix/python/venvs/psr"

    // Versions
    python_ver      = '3.11.6'
    giant_squid_ver = '1.0.3'
    vcsbeam_ver     = 'v5.0.1-alpha'

    // Options
    asvo_api_key = "$MWA_ASVO_API_KEY"
}

executor {
    $slurm {
        // Number of tasks handled in parallel
        queueSize = 30
        // Job submission rate
        submitRateLimit = '20/1min'
        // How often to poll the job status
        pollInterval = 30.s
        // Naming scheme
        jobName = { "${task.process}_(${task.index})" }
    }
    $local {
        // Local jobs should not be resource intensive
        cpus   = 1
        memory = 8.GB
    }
}

process {
    cache = 'lenient'

    withLabel: cluster {
        executor = 'slurm'
    }

    withLabel: python {
        beforeScript = "module load python/${params.python_ver}; . ${params.pyvenv}/bin/activate"
    }

    withLabel: giantsquid {
        beforeScript = "export MWA_ASVO_API_KEY='${params.asvo_api_key}'; module load giant-squid/${params.giant_squid_ver}; alias jq=$MYSOFTWARE/misc/jq-linux-amd64"
    }

    withName: VCSBEAM {
        time = { Integer.valueOf(params.vcsbeam_wt) * 1.h }
        maxForks = Integer.valueOf(params.vcsbeam_forks)
        clusterOptions = { "-A mwavcs-gpu -p mwa-gpu -n ${params.num_chan} --gpus-per-task=1" }
        beforeScript = "module load vcsbeam/${params.vcsbeam_ver}"
    }
}
